import os
import json
import src.utils as utils


# ⚠️ DO NOT EDIT THIS FILE.
# Set your preferences in the "prefs.json" file.


DEFAULT_PREFS = {
    "user_dir": f"{os.getcwd()}/user",
    "save_json": 1,

    "fetch_reblogs": 1,
    "fetch_favourites": 1,
    "fetch_bookmarks": 1,
    "fetch_mentions": 1,
    "fetch_polls": 1,
    "fetch_linked_posts": 1,
    "fetch_reply_parents": 1,

    "download_own_attachments": 1,
    "download_others_attachments": 1,

    "fetch_limit": 25,
    "recursion_limit": 100,
    "log_level": "info",
    "log_history_limit": 1000,
}


def load_prefs():
    filename = 'prefs.json'
    locations = ['user/', './']
    is_docker = os.environ.get('DOCKER_MODE', False)

    for location in locations:
        try:
            with open(f"{location}{filename}", 'r') as file:
                if not is_docker:
                    print(f"\nPreferences loaded from: {os.getcwd()}/{location}{filename}")
                return json.load(file)
            break
        except IOError:
            # print(f"'{filename}' not found in {os.getcwd()}/{location}")
            continue
    else:
        print(f"\n❌ Error loading 'prefs.json' - The script cannot continue.\n")
        quit()


def load_user_prefs(data):
    user_prefs = data['prefs'] if 'prefs' in data else {}

    # user_dir should not be changed by user in Docker mode
    is_docker = os.environ.get('DOCKER_MODE', False)
    if is_docker and 'user_dir' in user_prefs:
        del user_prefs['user_dir']

    prefs = DEFAULT_PREFS | user_prefs
    return prefs


def load_accounts(data):
    if (not 'accounts' in data) or (not data['accounts']):
        print("❌ No accounts are configured in the prefs.json file. The script cannot continue.")
        quit()

    accounts = []
    for account in data['accounts']:
        account['username'] = account['username'].replace('@', '')
        account['handle'] = utils.get_account_handle(account)
        account['safe'] = utils.get_account_handle(account, True)
        account['text'] = f"{account['username']} on {account['instance']}"
        accounts.append(account)
    return accounts


def load():
    data = load_prefs()
    prefs = load_user_prefs(data)
    accounts = load_accounts(data)
    return (prefs, accounts)

